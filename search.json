[{"path":"https://mathiaslj.github.io/mcmcglm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 mcmcglm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/articles/introduction.html","id":"adding-methods-for-new-families","dir":"Articles","previous_headings":"","what":"Adding methods for new families","title":"introduction","text":"Fx. inverse gaussian distribution add method calling mcmcglm remember add additional arguments density log_likelihood_extra_args argument case fx.","code":"log_density.inverse.gaussian <- function(family, main_parameter, Y, ...) {   statmod::dinvgauss(Y, mean = main_parameter, ..., log = T) } mcmcglm <- mcmcglm(family = \"inverse.gaussian\",                    log_density_extra_args = list(shape = x, dispersion = y),                    \"other arguments\")"},{"path":"https://mathiaslj.github.io/mcmcglm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mathias Lerbech Jeppesen. Author, maintainer.","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jeppesen M (2024). mcmcglm: Gibbs Sampling Methods. R package version 0.0.0.9000, https://mathiaslj.github.io/mcmcglm/, https://github.com/mathiaslj/mcmcglm.","code":"@Manual{,   title = {mcmcglm: Gibbs Sampling Methods},   author = {Mathias Lerbech Jeppesen},   year = {2024},   note = {R package version 0.0.0.9000, https://mathiaslj.github.io/mcmcglm/},   url = {https://github.com/mathiaslj/mcmcglm}, }"},{"path":"https://mathiaslj.github.io/mcmcglm/index.html","id":"mcmcglm","dir":"","previous_headings":"","what":"Gibbs Sampling Methods","title":"Gibbs Sampling Methods","text":"mcmcglm package implements CGGibbs sampler article Gibbs sampling faster Hamiltonian Monte Carlo GLMs?, linear run time function number parameters GLM model due clever ‚Äúupdate‚Äù linear predictor. package implemented way user can specify family response distribution prior Œ≤\\beta parameter, ùîº[Y|XŒ≤]=g‚àí1(XŒ≤)\\mathbb{E}[Y|X\\beta]=g^{-1}(X\\beta) link function gg specified family.","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gibbs Sampling Methods","text":"Installation available GitHub :","code":"devtools::install_github(\"mathiaslj/mcmcglm\")"},{"path":[]},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_density.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","title":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","text":"methods parametrised \"mu\" takes additional arguments needed calculation ... argument","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","text":"","code":"log_density(family, mu, Y, ...)"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","text":"family description error distribution link function used model. can character string naming family function, family function result call family function. (See family details family functions.) mu numeric vector values \"main\" parameter distribution specified family argument Y numeric vector response variable evaluate density ... arguments passed relevant methods","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","text":"numeric vector log_density values","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 generic for calculating the log density of a distribution dispatched via a family ‚Äî log_density","text":"Supported families gaussian, binomial, poisson negative.binomial. Implement S3 method add support new family. mcmcglm function called, mu modelled mean glm model (meaning inverse link linear predictor). Reference methods see parametrisation","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log likelihood parametrised by ","title":"Calculate log likelihood parametrised by ","text":"Calculate log likelihood parametrised \"mu\"","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log likelihood parametrised by ","text":"","code":"log_likelihood(family, mu, Y, ...)"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log likelihood parametrised by ","text":"family description error distribution link function used model. can character string naming family function, family function result call family function. (See family details family functions.) mu numeric vector values \"main\" parameter distribution specified family argument Y numeric vector response variable evaluate density ... arguments passed S3 generic log_density","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log likelihood parametrised by ","text":"numeric Value log-likelihood","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate log likelihood parametrised by ","text":"See log_density details","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_potential_from_betaj.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log-potential (log-likelihood plus log-density of prior) ‚Äî log_potential_from_betaj","title":"Calculate the log-potential (log-likelihood plus log-density of prior) ‚Äî log_potential_from_betaj","text":"Calculates log-potential function new coordinate beta parameter vector. Done like use unexporte","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_potential_from_betaj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log-potential (log-likelihood plus log-density of prior) ‚Äî log_potential_from_betaj","text":"","code":"log_potential_from_betaj(   new_beta_j,   j,   current_beta,   current_eta,   Y,   X_j,   family,   beta_prior,   ... )"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_potential_from_betaj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log-potential (log-likelihood plus log-density of prior) ‚Äî log_potential_from_betaj","text":"new_beta_j numeric new value j'th component beta parameter vector j numeric index parameter vector current_beta current value beta parameter vector sampling procedure current_eta current value linear predictor corresponding current_beta value Y numeric vector response variable evaluate density X_j j'th column design matrix family description error distribution link function used model. can character string naming family function, family function result call family function. (See family details family functions.) beta_prior distribution object created function distributional package. fx. distributional::dist_normal(mean = 0, sd = 1). ... arguments passed S3 generic log_density","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/log_potential_from_betaj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the log-potential (log-likelihood plus log-density of prior) ‚Äî log_potential_from_betaj","text":"value log-potential changed j'th component current_beta new_beta_j","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mcmcglm: Gibbs Sampling Methods ‚Äî mcmcglm-package","title":"mcmcglm: Gibbs Sampling Methods ‚Äî mcmcglm-package","text":"Sample posterior distributions using variations Gibbs samplers","code":""},{"path":[]},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mcmcglm: Gibbs Sampling Methods ‚Äî mcmcglm-package","text":"Maintainer: Mathias Lerbech Jeppesen mathiasljeppesen@outlook.com","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"Obtain MCMC samples using slice sampling within Gibbs generalized linear models (GLMs) using compute graph Gibbs (CGGibbs) linear runtime number variables model matrix. Method described article Gibbs sampling faster Hamiltonian Monte Carlo GLMs?, see details .","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"","code":"mcmcglm(   formula,   family = gaussian,   data,   beta_prior = distributional::dist_normal(0, 1),   log_likelihood_extra_args = list(sd = 1),   n_samples = 100,   burnin = 10,   sample_method = c(\"slice_sampling\", \"normal-normal\"),   qslice_fun = qslice::slice_stepping_out,   ... )"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"formula object class \"formula\" (one can coerced class): symbolic description model fitted. See details stats::glm family description error distribution link function used model. can character string naming family function, family function result call family function. (See family details family functions.) data optional data frame, list environment (object coercible .data.frame data frame) containing variables model. found data, variables taken environment(formula), typically environment function called. beta_prior distribution object created function distributional package. fx. distributional::dist_normal(mean = 0, sd = 1). log_likelihood_extra_args named list arguments passed onto log_density function. Fx. specification log_likelihood_extra_args = list(sd = x) needed case family = \"gaussian\" n_samples numeric number samples draw parameter(/variable) model burnin numeric number samples marked \"burnin\". Burnin samples included beta_mean calculation increase finite sample performance LLN estimate sample_method character specifying method used sampling. default \"slice_sampling\" intended value cases, works specification family beta_prior. \"normal-normal\" uses conditional normal distribution sample case conjugate prior gaussian response beta_prior. Implemented testing purposes works niche case. qslice_fun function qslice package. Default qslice::slice_stepping_out uses slice sampler Neal 2003, functions available. ... arguments passed onto function specified qslice_fun. default qslice::slice_stepping_out w needs specified, fx. qslice::slice_elliptical, mu sigma need specified","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"object class mcmcglm methods getting data.frame parameter samples, plotting, etc.","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"uses updating scheme linear predictor draw Gibbs sampling coordinates parameter vector","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"Gibbs sampling faster Hamiltonian Monte Carlo GLMs?, Neal 2003","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/mcmcglm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient Gibbs sampling of posterior distribution of parameters in GLM ‚Äî mcmcglm","text":"","code":"# Create test data for different scenarios n <- 100 x1 <- rnorm (n) x2 <- rbinom (n, 1, .5) b0 <- 1 b1 <- 1.5 b2 <- 2 lin_pred <- b0+b1*x1+b2*x2  ############################################# # Different families and priors  # For family \"gaussian\" and iid normal prior y_norm <- rnorm(n, mean = lin_pred, sd = 1) dat_norm <- data.frame(Y = y_norm, X1 = x1, X2 = x2)  norm <- mcmcglm(formula = Y ~ .,                    data = dat_norm,                    beta_prior = distributional::dist_normal(0, 1),                    family = \"gaussian\",                    n_samples = 100,                    burnin = 10,                    sample_method = \"slice_sampling\",                    qslice_fun = qslice::slice_stepping_out,                    w = 0.5) norm #> Object of class 'mcmcglm' #>  #> Call:  mcmcglm(formula = Y ~ ., family = \"gaussian\", data = dat_norm,  #>     beta_prior = distributional::dist_normal(0, 1), n_samples = 100,  #>     burnin = 10, sample_method = \"slice_sampling\", qslice_fun = qslice::slice_stepping_out,  #>     w = 0.5) #>  #> Average of parameter samples: #>   (Intercept)       X1       X2 #> 1    1.005522 1.570841 2.052491 #>   # For family \"binomial\" with logit link and iid gamma distributed prior # if (require(\"arm\")) { y_logit <- rbinom (n, 1, arm::invlogit(lin_pred)) dat_logit <- data.frame(Y = y_logit, X1 = x1, X2 = x2)  logit <- mcmcglm(formula = Y ~ .,                    data = dat_logit,                    beta_prior = distributional::dist_gamma(shape = 1, rate = 0.5),                    family = binomial(link = \"logit\"),                    n_samples = 100,                    burnin = 10,                    sample_method = \"slice_sampling\",                    qslice_fun = qslice::slice_stepping_out,                    w = 0.8) logit #> Object of class 'mcmcglm' #>  #> Call:  mcmcglm(formula = Y ~ ., family = binomial(link = \"logit\"), data = dat_logit,  #>     beta_prior = distributional::dist_gamma(shape = 1, rate = 0.5),  #>     n_samples = 100, burnin = 10, sample_method = \"slice_sampling\",  #>     qslice_fun = qslice::slice_stepping_out, w = 0.8) #>  #> Average of parameter samples: #>   (Intercept)     X1       X2 #> 1    1.173052 1.7743 2.819671 #>  # }  # For family \"negative.binomial\" and multivariate normal specification of parameter priors  # if (require(\"MASS\")) { y_log <- rnbinom(n, size = 1, mu = exp(lin_pred)) dat_log <- data.frame(Y = y_log, X1 = x1, X2 = x2)  # if (require(\"mvtnorm\")) { log <- mcmcglm(formula = Y ~ X1,                    data = dat_log,                    beta_prior = distributional::dist_multivariate_normal(                       mu = list(c(1, 2)),                       sigma = list(matrix(c(1, 0.5, 0.5, 1), ncol = 2))                    ),                    family = MASS::negative.binomial(3),                    n_samples = 100,                    burnin = 10,                    sample_method = \"slice_sampling\",                    qslice_fun = qslice::slice_stepping_out,                    w = 0.8) # } log #> Object of class 'mcmcglm' #>  #> Call:  mcmcglm(formula = Y ~ X1, family = MASS::negative.binomial(3),  #>     data = dat_log, beta_prior = distributional::dist_multivariate_normal(mu = list(c(1,  #>         2)), sigma = list(matrix(c(1, 0.5, 0.5, 1), ncol = 2))),  #>     n_samples = 100, burnin = 10, sample_method = \"slice_sampling\",  #>     qslice_fun = qslice::slice_stepping_out, w = 0.8) #>  #> Average of parameter samples: #>   (Intercept)       X1 iteration #> 1    2.460276 1.495213        56 #>   # For family \"negative.binomial\" and specification of different independent # priors for each parameter log2 <- mcmcglm(formula = Y ~ .,                    data = dat_log,                    beta_prior = list(distributional::dist_normal(0, 1),                                      distributional::dist_gamma(1, 1),                                      distributional::dist_exponential(2)),                    family = MASS::negative.binomial(3),                    n_samples = 100,                    burnin = 10,                    sample_method = \"slice_sampling\",                    qslice_fun = qslice::slice_stepping_out,                    w = 0.8) log2 #> Object of class 'mcmcglm' #>  #> Call:  mcmcglm(formula = Y ~ ., family = MASS::negative.binomial(3),  #>     data = dat_log, beta_prior = list(distributional::dist_normal(0,  #>         1), distributional::dist_gamma(1, 1), distributional::dist_exponential(2)),  #>     n_samples = 100, burnin = 10, sample_method = \"slice_sampling\",  #>     qslice_fun = qslice::slice_stepping_out, w = 0.8) #>  #> Average of parameter samples: #>   (Intercept)      X1       X2 #> 1    1.084614 1.49378 1.804015 #>   ############################################# # Using a different slice function log3 <- mcmcglm(formula = Y ~ .,                    data = dat_log,                    beta_prior = list(distributional::dist_normal(0, 1),                                      distributional::dist_gamma(1, 1),                                      distributional::dist_exponential(2)),                    family = MASS::negative.binomial(3),                    n_samples = 100,                    burnin = 10,                    sample_method = \"slice_sampling\",                    qslice_fun = qslice::slice_elliptical,                    mu = 1.5,                    sigma = 2) log3 #> Object of class 'mcmcglm' #>  #> Call:  mcmcglm(formula = Y ~ ., family = MASS::negative.binomial(3),  #>     data = dat_log, beta_prior = list(distributional::dist_normal(0,  #>         1), distributional::dist_gamma(1, 1), distributional::dist_exponential(2)),  #>     n_samples = 100, burnin = 10, sample_method = \"slice_sampling\",  #>     qslice_fun = qslice::slice_elliptical, mu = 1.5, sigma = 2) #>  #> Average of parameter samples: #>   (Intercept)       X1       X2 #> 1    1.144247 1.485623 1.736095 #>  # }"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the drawn samples from the object ‚Äî samples","title":"Get the drawn samples from the object ‚Äî samples","text":"Get drawn samples object","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the drawn samples from the object ‚Äî samples","text":"","code":"samples(x)"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the drawn samples from the object ‚Äî samples","text":"x mcmcglm object","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a trace plot of the MCMC samples ‚Äî trace_plot","title":"Create a trace plot of the MCMC samples ‚Äî trace_plot","text":"Create trace plot MCMC samples","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a trace plot of the MCMC samples ‚Äî trace_plot","text":"","code":"trace_plot(x, samples_drop = NULL)"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a trace plot of the MCMC samples ‚Äî trace_plot","text":"x mcmcglm object samples_drop numeric specifying number initial samples exclude trace_plot improve axis zoom plot","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/update_linear_predictor.html","id":null,"dir":"Reference","previous_headings":"","what":"Update value of a linear predictor as function of a single coordinate change ‚Äî update_linear_predictor","title":"Update value of a linear predictor as function of a single coordinate change ‚Äî update_linear_predictor","text":"Function updating linear predictor n actions rather nn_vars actions naively matrix-vector product X %% beta","code":""},{"path":"https://mathiaslj.github.io/mcmcglm/reference/update_linear_predictor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update value of a linear predictor as function of a single coordinate change ‚Äî update_linear_predictor","text":"","code":"update_linear_predictor(new_beta_j, current_beta_j, current_eta, X_j)"},{"path":"https://mathiaslj.github.io/mcmcglm/reference/update_linear_predictor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update value of a linear predictor as function of a single coordinate change ‚Äî update_linear_predictor","text":"new_beta_j numeric new value j'th component beta parameter vector current_beta_j numeric current value j'th component beta parameter vector current_eta current value linear predictor corresponding current_beta value X_j j'th column design matrix","code":""}]
